<div class="template-box px-4 px-md-5 set-width pl-0 mr-0 mr-lg-2 mt-3 box-radius bg-white">
  <div class="template-box-title"><%= cat.title  %></div>

  <% if params[:submission_id] %>

    <% if @recipients_results[cat.id.to_s].present? %>

      <% cat.questions.each do |q| %>

        <% if @recipients_results[cat.id.to_s][q.id.to_s].present? %>
          <% if @recipients_results[cat.id.to_s][q.id.to_s][params[:submission_id].to_i][params[:recipient_id].to_i].present? %>
<!--             <div style="width: 600px;height: 500px;">
               <canvas id="npsChart<%= 'report' %><%=params[:submission_id].to_s %>" width="600px" height="300px" style="width: 200px; height: 500px;"></canvas>
            </div> -->
            <div style="width: 426px;height: 213px;">
               <canvas id="npsChart<%= 'report' %><%=params[:submission_id].to_s %>" style="width: 426px; height: 213px;" width="426" height="213"></canvas>
               </div>
            <script>
                Function.prototype.bind = Function.prototype.bind || function (thisp) {
                var fn = this;
                return function () {
                    return fn.apply(thisp, arguments);
                };
            };
                Chart.pluginService.register({
                    beforeDraw: function (chart) {
                        if (chart.config.options.elements.center) {
                            //Get ctx from string
                            var ctx = chart.chart.ctx;

                            //Get options from the center object in options
                            var centerConfig = chart.config.options.elements.center;
                            var fontStyle = centerConfig.fontStyle || 'Arial';
                            var txt = centerConfig.text;
                            var color = centerConfig.color || '#000';
                            var sidePadding = centerConfig.sidePadding || 20;
                            var sidePaddingCalculated = (sidePadding/100) * (chart.innerRadius * 2)
                            //Start with a base font of 30px
                            ctx.font = "50px " + fontStyle;

                            //Get the width of the string and also the width of the element minus 10 to give it 5px side padding
                            var stringWidth = ctx.measureText(txt).width;
                            var elementWidth = (chart.innerRadius * 2) - sidePaddingCalculated;

                            // Find out how much the font can grow in width.
                            var widthRatio = elementWidth / stringWidth;
                            var newFontSize = Math.floor(30 * widthRatio);
                            var elementHeight = (chart.innerRadius * 2);

                            // Pick a new font size so it will not be larger than the height of label.
                            var fontSizeToUse = Math.min(newFontSize, elementHeight);

                            //Set font settings to draw it correctly.
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'middle';
                            var centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);
                            var centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 1.3);
                            ctx.font = fontSizeToUse+"px " + fontStyle;
                            ctx.fillStyle = color;

                            //Draw text in center
                            ctx.fillText(txt, centerX, centerY);
                        }
                    }
                });


                var config<%= 'report' %><%=params[:submission_id].to_s %> = {
                    type: 'doughnut',
                    data: {
                        labels: [
                            "Detractors",
                            "Promoters",
                            "Passives"
                        ],
                        datasets: [{
                            data: [
                                <%= nps_calculator([@recipients_results[cat.id.to_s][q.id.to_s][params[:submission_id].to_i][params[:recipient_id].to_i].to_sentence])[:detractors] %>,
                                <%= nps_calculator([@recipients_results[cat.id.to_s][q.id.to_s][params[:submission_id].to_i][params[:recipient_id].to_i].to_sentence])[:promoters] %>,
                                <%= nps_calculator([@recipients_results[cat.id.to_s][q.id.to_s][params[:submission_id].to_i][params[:recipient_id].to_i].to_sentence])[:passives] %>
                            ],
                            backgroundColor: [
                                "#FF6384",
                                "#009788",
                                "#FFCE56"
                            ],
                            hoverBackgroundColor: [
                                "#FF6384",
                                "#009788",
                                "#FFCE56"
                            ]
                        }]
                    },
                    options: {
                        animation : false,
                        rotation: 1 * Math.PI,
                        circumference: 1 * Math.PI,
                        elements: {
                            center: {
                                text: '<%= nps_calculator([@recipients_results[cat.id.to_s][q.id.to_s][params[:submission_id].to_i][params[:recipient_id].to_i].to_sentence])[:total_score] %>',
                                color: 'black',
                                fontStyle: 'Arial',
                                sidePadding: 20
                            }
                        },
                        plugins: {
                            datalabels: {
                                display: function(context) {
                                    return context.dataset.data[context.dataIndex] !== 0;
                                },
                                color: '#FFFFFF'
                            }
                        }
                    }
                };

                var ctx<%= 'report' %><%=params[:submission_id].to_s %> = document.getElementById("npsChart<%= 'report' %><%=params[:submission_id].to_s %>").getContext("2d");
                var myChart = new Chart(ctx<%= 'report' %><%=params[:submission_id].to_s %>, config<%= 'report' %><%=params[:submission_id].to_s %>);
            </script>

          <% end %>
        <% end %>

      <% end %>
    <% end %>

  <% else %>

    <% cat.questions.each do |q| %>
      <canvas id="npsChartreport46demo" style="display: block; width: 442px; height: 221px;" height="221" class="chartjs-render-monitor" width="442"></canvas>
      <script>
          Chart.pluginService.register({
              beforeDraw: function (chart) {
                  if (chart.config.options.elements.center) {
                      //Get ctx from string
                      var ctx = chart.chart.ctx;

                      //Get options from the center object in options
                      var centerConfig = chart.config.options.elements.center;
                      var fontStyle = centerConfig.fontStyle || 'Arial';
                      var txt = centerConfig.text;
                      var color = centerConfig.color || '#000';
                      var sidePadding = centerConfig.sidePadding || 20;
                      var sidePaddingCalculated = (sidePadding/100) * (chart.innerRadius * 2)
                      //Start with a base font of 30px
                      ctx.font = "50px " + fontStyle;

                      //Get the width of the string and also the width of the element minus 10 to give it 5px side padding
                      var stringWidth = ctx.measureText(txt).width;
                      var elementWidth = (chart.innerRadius * 2) - sidePaddingCalculated;

                      // Find out how much the font can grow in width.
                      var widthRatio = elementWidth / stringWidth;
                      var newFontSize = Math.floor(30 * widthRatio);
                      var elementHeight = (chart.innerRadius * 2);

                      // Pick a new font size so it will not be larger than the height of label.
                      var fontSizeToUse = Math.min(newFontSize, elementHeight);

                      //Set font settings to draw it correctly.
                      ctx.textAlign = 'center';
                      ctx.textBaseline = 'middle';
                      var centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);
                      var centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 1.3);
                      ctx.font = fontSizeToUse+"px " + fontStyle;
                      ctx.fillStyle = color;

                      //Draw text in center
                      ctx.fillText(txt, centerX, centerY);
                  }
              }
          });


          var configreport46demo = {
              type: 'doughnut',
              data: {
                  labels: [
                      "Detractors",
                      "Promoters",
                      "Passives"
                  ],
                  datasets: [{
                      data: [
                          0,
                          1,
                          0
                      ],
                      backgroundColor: [
                          "#FF6384",
                          "#009788",
                          "#FFCE56"
                      ],
                      hoverBackgroundColor: [
                          "#FF6384",
                          "#009788",
                          "#FFCE56"
                      ]
                  }]
              },
              options: {
                  rotation: 1 * Math.PI,
                  circumference: 1 * Math.PI,
                  elements: {
                      center: {
                          text: '100.0',
                          color: 'black',
                          fontStyle: 'Arial',
                          sidePadding: 20
                      }
                  },
                  plugins: {
                      datalabels: {
                          display: function(context) {
                              return context.dataset.data[context.dataIndex] !== 0;
                          },
                          color: '#FFFFFF'
                      }
                  }
              }
          };

          var ctxreport46demo = document.getElementById("npsChartreport46demo").getContext("2d");
          var myChart = new Chart(ctxreport46demo, configreport46demo);
      </script>
      <br>
    <% end %>


  <% end %>

</div>