<%= wicked_pdf_stylesheet_link_tag 'pdf.css' %>
<%= wicked_pdf_javascript_include_tag "http://code.jquery.com/jquery-1.10.0.min.js" %>
<div class="template-box px-4 px-md-5 question-rating-scale-box question-comment-box set-width pl-0 mr-0 mr-lg-2 mt-3 box-radius bg-white">
  <div style="display: flex">
    <div class="sus_title" style="width: 100%;"><%= cat.title %></div>
    <% if @show_hide_sus_btn != "show" || @cust_show_hide_sus_btn == "show" %>
      <div style="display: flex;width: 27%;">
        <div style="padding-top: 7px;">Show / Hide SUS Chart :</div>
        <div><label class="switch"><input type="checkbox" id="susToggle"
                                          <% if @show_hide_sus_btn != "show" %> onclick="sus_dis_hide(this)"
                                          <% elsif @cust_show_hide_sus_btn == "show" %>onclick="sus_dis_hide_cus(this)"
        <% else %>onclick="sus_dis_hide_res(this)"
        <% end %>><span class="slider round build-slider"></span></label></div>
      </div>
    <% end %>
  </div>

  <div class="pr-md-5">
    <div id="donut_chart" class="mt-10" style="margin-bottom: 3%;width: 100%;display: flex;">
      <div class="mt-10 small_chart" style="width: 30%;margin-right: 10px;<%if @show_hide_sus_btn != "show"%>padding-right: 65px;<%else%>padding-right: 15px;
        <% end %>">
        <table id="sus_table" cellspacing="1" cellpadding="1">
          <thead>
          <tr align="center">
            <th>SUS Score</th>
            <th>Grade</th>
            <th>Adjective Rating</th>
          </tr>
          </thead>
          <tbody>
          <tr>
            <td>> 80.3</td>
            <td>A</td>
            <td>Excellent</td>
          </tr>
          <tr>
            <td>68 - 83.3</td>
            <td>B</td>
            <td>Good</td>
          </tr>
          <tr>
            <td>68</td>
            <td>C</td>
            <td>Okay</td>
          </tr>
          <tr>
            <td>51-68</td>
            <td>D</td>
            <td>Poor</td>
          </tr>
          <tr>
            <td>< 51</td>
            <td>F</td>
            <td>Worst</td>
          </tr>
          </tbody>
        </table>
      </div>
      <% if @show_hide_sus_btn != "show" %>
        <div class="mt-10" id="chart_div" style="width: 70%;display: flex;">
          <div class="main_chart"
               <% if @show_hide_sus_btn != "show" %>style="padding-right: 65px;"
          <% end %>>
            <canvas id="canvas_sus" height="300" width="300"></canvas>
            <div style="color: #29a4ea;padding-left: 90px;">Overall Score</div>
          </div>
          <div class="small_chart res_chart" style="display: grid;<%if @show_hide_sus_btn != "show"%>padding-right: 65px;
            <% end %>">
            <canvas id="canvas_persentile" height="200" width="200"></canvas>
            <div style="color: #29a4ea;padding-left: 60px">Percentile</div>
          </div>
          <div class="small_chart res_chart" style="display: grid;">
            <canvas id="canvas_grade" height="200" width="200"></canvas>
            <div style="color: #29a4ea;padding-left: 50px">Letter grade</div>
          </div>
        </div>
      <% elsif @cust_show_hide_sus_btn == "show" %>
        <div class="mt-10" id="chart_div" style="width: 70%;display: flex;">
          <div style="padding-right: 15px;">
            <canvas id="canvas_sus_cus_modelbox" height="300" width="300"></canvas>
            <div style="color: #29a4ea;padding-left: 90px;">Overall Score</div>
          </div>
          <div class="small_chart" style="display: grid;padding-right: 15px;">
            <canvas id="canvas_persentile_cus_modelbox" height="200" width="200"></canvas>
            <div style="color: #29a4ea;padding-left: 60px">Percentile</div>
          </div>
          <div class="small_chart" style="display: grid;">
            <canvas id="canvas_grade_cus_modelbox" height="200" width="200"></canvas>
            <div style="color: #29a4ea;padding-left: 50px">Letter grade</div>
          </div>
        </div>
      <% else %>
        <div class="mt-10" id="chart_div" style="width: 70%;display: flex;">
          <div style="padding-right: 15px;">
            <canvas id="canvas_sus_modelbox" height="300" width="300"></canvas>
            <div style="color: #29a4ea;padding-left: 90px;">Overall Score</div>
          </div>
          <div class="small_chart" style="display: grid;padding-right: 15px;">
            <canvas id="canvas_persentile_modelbox" height="200" width="200"></canvas>
            <div style="color: #29a4ea;padding-left: 60px">Percentile</div>
          </div>
          <div class="small_chart" style="display: grid;">
            <canvas id="canvas_grade_modelbox" height="200" width="200"></canvas>
            <div style="color: #29a4ea;padding-left: 50px">Letter grade</div>
          </div>
        </div>
      <% end %>
    </div>

    <% if @show_hide_sus_btn != "show" %>
      <div id="sus_chart" class="sus_chart" style="display: none">
    <% elsif @cust_show_hide_sus_btn == "show" %>
      <div id="sus_chart_cus" class="sus_chart_cus" style="display: none">
    <% else %>
      <div id="sus_chart_res" class="sus_chart_res" style="display: none">
    <% end %>
    <div class="mt-10" style="margin-bottom: 3%;width: 100%;display: flex;">
      <div style="width:18%;font-weight: 700;">Acceptable :</div>
      <div style="width: 82%;display: flex;font-size: 10px;">
        <div class="acceptable div_2
          <% if !@acceptable.include?("Not Acceptable") %> no_result
          <% end %>" style="width: 51.6%;padding-top: 5px;">Not Acceptable
        </div>
        <div class="acceptable div_3
          <% if !@acceptable.include?("Marginal") %> no_result
          <% end %>" style="width: 19.4%;padding-top: 5px;">Marginal
        </div>
        <div class="acceptable div_5
          <% if !@acceptable.include?("Acceptable") %> no_result
          <% end %>" style="width: 29%;padding-top: 5px;">Acceptable
        </div>
      </div>
    </div>
    <br>
    <div class="mt-10" style="margin-top: -4%;margin-bottom: 3%;width: 100%;display: flex;">
      <div style="width:18%;font-weight: 700;">Adjective :</div>
      <div style="width: 82%;display: flex;font-size: 10px;">
        <div class="adj_div_1
          <% if !@adjective.include?("Worst Imaginable") %> no_result
          <% end %>" style="width: 25%;padding-top: 5px;">Worst
        </div>
        <div class="adj_div_2
          <% if !@adjective.include?("Poor") %> no_result
          <% end %>" style="width: 26.6%;padding-top: 5px;">Poor
        </div>
        <div class="adj_div_3
          <% if !@adjective.include?("OK") %> no_result
          <% end %>" style="width: 11%;padding-top: 5px;">OK
        </div>
        <div class="adj_div_4
          <% if !@adjective.include?("Good") %> no_result
          <% end %>" style="width: 9.9%;padding-top: 5px;">Good
        </div>
        <div class="adj_div_5
          <% if !@adjective.include?("Excellent") %> no_result
          <% end %>" style="width: 11.5%;padding-top: 5px;">Excellent
        </div>
        <div class="adj_div_6
          <% if !@adjective.include?("Best Imaginable") %> no_result
          <% end %>" style="width: 16%;padding-top: 5px;">Best
        </div>
      </div>
    </div>
    <br>
    <div class="mt-10" style="margin-top: -4%;margin-bottom: 3%;width: 100%;display: flex;">
      <div style="width:18%;font-weight: 700;">Grade :</div>
      <div style="width: 82%;display: flex;font-weight: 700;font-size: 21px;">
        <div class="grade
          <% if !@grade.include?("F") %> no_result
          <% end %>" style="width: 51.6%;">F
        </div>
        <div class="grade
          <% if !@grade.include?("D") %> no_result
          <% end %>" style="width: 11%;">D
        </div>
        <div class="grade
          <% if !@grade.include?("C") %> no_result
          <% end %>" style="width: 9.9%;">C
        </div>
        <div class="grade
          <% if !@grade.include?("B") %> no_result
          <% end %>" style="width: 6.3%;">B
        </div>
        <div class="grade
          <% if !@grade.include?("A") %> no_result
          <% end %>" style="width: 21.2%;">A
        </div>
      </div>
    </div>
    <br>
    <div class="mt-10" style="margin-top: -4%;margin-bottom: 3%;width: 100%;display: flex;">
      <div style="width:18%;">&nbsp;</div>
      <div style="width: 82%;display: flex;">
        <span>|</span>
        <hr class="score" style="width: 10%;">
        |</hr>
        <hr class="score" style="width: 10%;">
        |</hr>
        <hr class="score" style="width: 10%;">
        |</hr>
        <hr class="score" style="width: 10%;">
        |</hr>
        <hr class="score" style="width: 10%;">
        |</hr>
        <hr class="score" style="width: 10%;">
        |</hr>
        <hr class="score" style="width: 10%;">
        |</hr>
        <hr class="score" style="width: 10%;">
        |</hr>
        <hr class="score" style="width: 10%;">
        |</hr>
        <hr class="score" style="width: 10%;">
        |</hr>
      </div>
    </div>
    <div class="mt-10" style="margin-top: -4%;margin-bottom: 3%;width: 100%;display: flex;">
      <div style="width:18%;font-weight: 700;">SUS Score :</div>
      <div style="width: 82%;display: flex;">
        <span>0</span>
        <div style="width: 10%;padding-left: 8.5%;">10</div>
        <div style="width: 10%;padding-left: 8.5%;">20</div>
        <div style="width: 10%;padding-left: 8.5%;">30</div>
        <div style="width: 10%;padding-left: 8.5%;">40</div>
        <div style="width: 10%;padding-left: 8.1%;">50</div>
        <div style="width: 10%;padding-left: 8.2%;">60</div>
        <div style="width: 10%;padding-left: 8.2%;">70</div>
        <div style="width: 10%;padding-left: 8.2%;">80</div>
        <div style="width: 10%;padding-left: 8%;">90</div>
        <div style="width: 10%;padding-left: 7%;">100</div>
      </div>
    </div>
    </div>

    <div class="mt-10 sus_content">
      <div class="sus_desc">Interpreting System Usability Scale (SUS) Score</div>
      <div id="chart_content">
        SUS score will be able to tell you your usability performance in the aspects of effectiveness, efficiency, and
        overall ease of use. Although each responses yield a score on a scale of 0 – 100.
        The average SUS score is 68. This simply means that a score of 68 will just put you at 50th percentile.
      </div>
    </div>
    </div>
    </div>
  </div>
</div>

<style type="text/css">
    .px-md-5 {
        padding-left: 25px !important;
    }

    #sus_table table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    #sus_table td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
        text-align: center;
    }

    #sus_table th {
        font-weight: 600;
        background-color: #dddddd73;
    }

    #sus_table tr:nth-child(even) {
        background-color: #dddddd73;
    }

    .sus_title {
        color: #055192ed;
        font-family: 'Open Sans', sans-serif;
        line-height: 28px;
        margin-bottom: 10px;
        font-size: 26px;
        font-weight: 700;
    }

    .sus_desc {
        color: #055192ed;
        font-family: 'Open Sans', sans-serif;
        font-size: 22px;
        line-height: 28px;
        margin-bottom: 10px;
        font-weight: 700;
    }

    .avg_grade {
        color: #055192ed;
        font-size: 20px;
        font-weight: 100;
    }

    .small_chart {
        display: flex;
        flex-wrap: wrap;
        align-content: center;
    }

    .col-lg-6, .px-2 {
        width: 100% !important;
    }

    .grade:nth-of-type(odd) {
        text-align: center;
        background: #ccccccc4;
    }

    .grade:nth-of-type(even) {
        text-align: center;
        background: #cccccc59;
    }

    .div_1 {
        text-align: center;
        background: #dc3545;
    }

    .div_2 {
        text-align: center;
        background: #fd7e14;
    }

    .div_3 {
        text-align: center;
        background: #ffc107;
    }

    .div_4 {
        text-align: center;
        background: #20c997;
    }

    .div_5 {
        text-align: center;
        background: #28a745;
    }

    .adj_div_1 {
        text-align: center;
        background: #ff4000;
    }

    .adj_div_2 {
        text-align: center;
        background: #ff8000;
    }

    .adj_div_3 {
        text-align: center;
        background: #ffbf00;
    }

    .adj_div_4 {
        text-align: center;
        background: #bfff00;
    }

    .adj_div_5 {
        text-align: center;
        background: #00ff00;
    }

    .adj_div_6 {
        text-align: center;
        background: #00b300;
    }

    .score {
        margin-top: 3%;
        background-color: #000;
    }

    .no_result {
        background: #ddd !important;
        color: #616467 !important;
    }

    .sus_content {
        padding: 5px;
        border-bottom: 1px solid #ddd;
        border-top: 1px solid #ddd;
        word-break: break-word;
        font-size: 16px;
        color: #8dabc4;
    }

    /*iPad*/
    @media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: portrait) {
        #donut_chart {
            display: block !important;
        }

        .res_chart {
            padding-right: 0px !important;
        }

        .main_chart {
            padding-right: 0px !important;
        }
    }

    @media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {
        #donut_chart {
            display: block !important;
        }

        .res_chart {
            padding-right: 0px !important;
        }

        .main_chart {
            padding-right: 0px !important;
        }
    }

    /*mobile 360*640*/
    @media only screen and (min-width: 360px) and (max-width: 768px) and (orientation: portrait) {
        #donut_chart {
            display: block !important;
        }

        .res_chart {
            padding-right: 0px !important;
            padding-left: 50px !important;
        }

        .main_chart {
            padding-right: 0px !important;
        }

        #chart_div {
            display: block !important;
        }
    }


    @media only screen and (min-width: 360px) and (max-width: 768px) and (orientation: landscape) {
        #donut_chart {
            display: block !important;
        }

        .res_chart {
            padding-right: 0px !important;
            padding-left: 50px !important;
        }

        .main_chart {
            padding-right: 0px !important;
        }

        #chart_div {
            display: block !important;
        }
    }
</style>

<script type="text/javascript">
    function sus_dis_hide(obj) {
        if (obj.checked) {
            $(".sus_chart").css("display", "block");
        } else {
            $(".sus_chart").css("display", "none");
        }
    }

    function sus_dis_hide_cus(obj) {
        if (obj.checked) {
            $(".sus_chart_cus").css("display", "block");
        } else {
            $(".sus_chart_cus").css("display", "none");
        }
    }

    function sus_dis_hide_res(obj) {
        if (obj.checked) {
            $(".sus_chart_res").css("display", "block");
        } else {
            $(".sus_chart_res").css("display", "none");
        }
    }

    $('#donutToggle').change(function () {
        if (this.checked) {
            $("#donut_chart").css("display", "flex");
        } else {
            $("#donut_chart").css("display", "none");
        }
    });

    $(document).ready(function () {
        var pieData = [
            {
                value: <%=@avg_sus%>,
                color: "#337DFF"
            },
            {
                value: <%=100-@avg_sus%>,
                color: "#e2e6f2"
            }
        ];

        var percentileData = [
            {
                value: <%=@percentile%>,
                color: "#337DFF"
            },
            {
                value: <%=100-@percentile%>,
                color: "#e2e6f2"
            }
        ];
        <%if @show_hide_sus_btn != "show"%>
        var myPie = new DChart(document.getElementById("canvas_sus").getContext("2d")).Doughnut(pieData, {percentageInnerCutout: 80});
        var myPie = new PChart(document.getElementById("canvas_persentile").getContext("2d")).Doughnut(percentileData, {percentageInnerCutout: 80});
        var myPie = new GChart(document.getElementById("canvas_grade").getContext("2d")).Doughnut(pieData, {percentageInnerCutout: 80});
        <%elsif @cust_show_hide_sus_btn == "show"%>
        setTimeout(function () {
            var myPie = new DChart(document.getElementById("canvas_sus_cus_modelbox").getContext("2d")).Doughnut(pieData, {percentageInnerCutout: 80});
            var myPie = new PChart(document.getElementById("canvas_persentile_cus_modelbox").getContext("2d")).Doughnut(percentileData, {percentageInnerCutout: 80});
            var myPie = new GChart(document.getElementById("canvas_grade_cus_modelbox").getContext("2d")).Doughnut(pieData, {percentageInnerCutout: 80});
        }, 500)
        <%else%>
        setTimeout(function () {
            var myPie = new DChart(document.getElementById("canvas_sus_modelbox").getContext("2d")).Doughnut(pieData, {percentageInnerCutout: 80});
            var myPie = new PChart(document.getElementById("canvas_persentile_modelbox").getContext("2d")).Doughnut(percentileData, {percentageInnerCutout: 80});
            var myPie = new GChart(document.getElementById("canvas_grade_modelbox").getContext("2d")).Doughnut(pieData, {percentageInnerCutout: 80});
        }, 500)
        <%end%>
    });

    window.DChart = function (context) {

        var chart = this;

        var animationOptions = {
            linear: function (t) {
                return t;
            },
            easeInQuad: function (t) {
                return t * t;
            },
            easeOutQuad: function (t) {
                return -1 * t * (t - 2);
            },
            easeInOutQuad: function (t) {
                if ((t /= 1 / 2) < 1) return 1 / 2 * t * t;
                return -1 / 2 * ((--t) * (t - 2) - 1);
            },
            easeInCubic: function (t) {
                return t * t * t;
            },
            easeOutCubic: function (t) {
                return 1 * ((t = t / 1 - 1) * t * t + 1);
            },
            easeInOutCubic: function (t) {
                if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t;
                return 1 / 2 * ((t -= 2) * t * t + 2);
            },
            easeInQuart: function (t) {
                return t * t * t * t;
            },
            easeOutQuart: function (t) {
                return -1 * ((t = t / 1 - 1) * t * t * t - 1);
            },
            easeInOutQuart: function (t) {
                if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t;
                return -1 / 2 * ((t -= 2) * t * t * t - 2);
            },
            easeInQuint: function (t) {
                return 1 * (t /= 1) * t * t * t * t;
            },
            easeOutQuint: function (t) {
                return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
            },
            easeInOutQuint: function (t) {
                if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t * t;
                return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
            },
            easeInSine: function (t) {
                return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
            },
            easeOutSine: function (t) {
                return 1 * Math.sin(t / 1 * (Math.PI / 2));
            },
            easeInOutSine: function (t) {
                return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
            },
            easeInExpo: function (t) {
                return (t == 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
            },
            easeOutExpo: function (t) {
                return (t == 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
            },
            easeInOutExpo: function (t) {
                if (t == 0) return 0;
                if (t == 1) return 1;
                if ((t /= 1 / 2) < 1) return 1 / 2 * Math.pow(2, 10 * (t - 1));
                return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
            },
            easeInCirc: function (t) {
                if (t >= 1) return t;
                return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
            },
            easeOutCirc: function (t) {
                return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
            },
            easeInOutCirc: function (t) {
                if ((t /= 1 / 2) < 1) return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
                return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
            },
            easeInElastic: function (t) {
                var s = 1.70158;
                var p = 0;
                var a = 1;
                if (t == 0) return 0;
                if ((t /= 1) == 1) return 1;
                if (!p) p = 1 * .3;
                if (a < Math.abs(1)) {
                    a = 1;
                    var s = p / 4;
                } else var s = p / (2 * Math.PI) * Math.asin(1 / a);
                return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
            },
            easeOutElastic: function (t) {
                var s = 1.70158;
                var p = 0;
                var a = 1;
                if (t == 0) return 0;
                if ((t /= 1) == 1) return 1;
                if (!p) p = 1 * .3;
                if (a < Math.abs(1)) {
                    a = 1;
                    var s = p / 4;
                } else var s = p / (2 * Math.PI) * Math.asin(1 / a);
                return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
            },
            easeInOutElastic: function (t) {
                var s = 1.70158;
                var p = 0;
                var a = 1;
                if (t == 0) return 0;
                if ((t /= 1 / 2) == 2) return 1;
                if (!p) p = 1 * (.3 * 1.5);
                if (a < Math.abs(1)) {
                    a = 1;
                    var s = p / 4;
                } else var s = p / (2 * Math.PI) * Math.asin(1 / a);
                if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
                return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * .5 + 1;
            },
            easeInBack: function (t) {
                var s = 1.70158;
                return 1 * (t /= 1) * t * ((s + 1) * t - s);
            },
            easeOutBack: function (t) {
                var s = 1.70158;
                return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
            },
            easeInOutBack: function (t) {
                var s = 1.70158;
                if ((t /= 1 / 2) < 1) return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));
                return 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
            },
            easeInBounce: function (t) {
                return 1 - animationOptions.easeOutBounce(1 - t);
            },
            easeOutBounce: function (t) {
                if ((t /= 1) < (1 / 2.75)) {
                    return 1 * (7.5625 * t * t);
                } else if (t < (2 / 2.75)) {
                    return 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + .75);
                } else if (t < (2.5 / 2.75)) {
                    return 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375);
                } else {
                    return 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375);
                }
            },
            easeInOutBounce: function (t) {
                if (t < 1 / 2) return animationOptions.easeInBounce(t * 2) * .5;
                return animationOptions.easeOutBounce(t * 2 - 1) * .5 + 1 * .5;
            }
        };

        var width = context.canvas.width;
        var height = context.canvas.height;

        if (window.devicePixelRatio) {
            context.canvas.style.width = width + "px";
            context.canvas.style.height = height + "px";
            context.canvas.height = height * window.devicePixelRatio;
            context.canvas.width = width * window.devicePixelRatio;
            context.scale(window.devicePixelRatio, window.devicePixelRatio);
        }

        this.Doughnut = function (data, options) {
            chart.Doughnut.defaults = {
                segmentShowStroke: true,
                segmentStrokeColor: "#fff",
                segmentStrokeWidth: 2,
                percentageInnerCutout: 50,
                animation: true,
                animationSteps: 100,
                animationEasing: "easeOutBounce",
                animateRotate: true,
                animateScale: false,
                onAnimationComplete: null,
                labelFontFamily: "Arial",
                labelFontStyle: "normal",
                labelFontSize: 24,
                labelFontColor: "#666"
            };

            var config = (options) ? mergeChartConfig(chart.Doughnut.defaults, options) : chart.Doughnut.defaults;

            return new Doughnut(data, config, context);
        };

        var clear = function (c) {
            c.clearRect(0, 0, width, height);
        };

        var Doughnut = function (data, config, ctx) {
            var segmentTotal = 0;

            var doughnutRadius = Min([height / 2, width / 2]) - 5;

            var cutoutRadius = doughnutRadius * (config.percentageInnerCutout / 100);

            for (var i = 0; i < data.length; i++) {
                segmentTotal += data[i].value;
            }

            animationLoop(config, null, drawPieSegments, ctx);

            function drawPieSegments(animationDecimal) {
                ctx.font = config.labelFontStyle + " " + config.labelFontSize + "px " + config.labelFontFamily;
                ctx.fillStyle = '#29a4ea';
                ctx.textBaseline = 'middle';
                ctx.fillText(data[0].value, width / 2 - 20, width / 2, 200);

                var cumulativeAngle = -Math.PI / 2,
                    scaleAnimation = 1,
                    rotateAnimation = 1;
                if (config.animation) {
                    if (config.animateScale) {
                        scaleAnimation = animationDecimal;
                    }
                    if (config.animateRotate) {
                        rotateAnimation = animationDecimal;
                    }
                }
                for (var i = 0; i < data.length; i++) {
                    var segmentAngle = rotateAnimation * ((data[i].value / segmentTotal) * (Math.PI * 2));
                    ctx.beginPath();
                    ctx.arc(width / 2, height / 2, scaleAnimation * doughnutRadius, cumulativeAngle, cumulativeAngle + segmentAngle, false);
                    ctx.arc(width / 2, height / 2, scaleAnimation * cutoutRadius, cumulativeAngle + segmentAngle, cumulativeAngle, true);
                    ctx.closePath();
                    ctx.fillStyle = data[i].color;
                    ctx.fill();

                    if (config.segmentShowStroke) {
                        ctx.lineWidth = config.segmentStrokeWidth;
                        ctx.strokeStyle = config.segmentStrokeColor;
                        ctx.stroke();
                    }
                    cumulativeAngle += segmentAngle;
                }

            }

        }

        function calculateOffset(val, calculatedScale, scaleHop) {
            var outerValue = calculatedScale.steps * calculatedScale.stepValue;
            var adjustedValue = val - calculatedScale.graphMin;
            var scalingFactor = CapValue(adjustedValue / outerValue, 1, 0);
            return (scaleHop * calculatedScale.steps) * scalingFactor;
        }

        function animationLoop(config, drawScale, drawData, ctx) {
            var animFrameAmount = (config.animation) ? 1 / CapValue(config.animationSteps, Number.MAX_VALUE, 1) : 1,
                easingFunction = animationOptions[config.animationEasing],
                percentAnimComplete = (config.animation) ? 0 : 1;


            if (typeof drawScale !== "function") drawScale = function () {
            };

            requestAnimFrame(animLoop);

            function animateFrame() {
                var easeAdjustedAnimationPercent = (config.animation) ? CapValue(easingFunction(percentAnimComplete), null, 0) : 1;
                clear(ctx);
                if (config.scaleOverlay) {
                    drawData(easeAdjustedAnimationPercent);
                    drawScale();
                } else {
                    drawScale();
                    drawData(easeAdjustedAnimationPercent);
                }
            }

            function animLoop() {
                percentAnimComplete += animFrameAmount;
                animateFrame();
                if (percentAnimComplete <= 1) {
                    requestAnimFrame(animLoop);
                } else {
                    if (typeof config.onAnimationComplete == "function") config.onAnimationComplete();
                }


            }

        }


        var requestAnimFrame = (function () {
            return window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimationFrame ||
                function (callback) {
                    window.setTimeout(callback, 1000 / 60);
                };
        })();

        function calculateScale(drawingHeight, maxSteps, minSteps, maxValue, minValue, labelTemplateString) {
            var graphMin, graphMax, graphRange, stepValue, numberOfSteps, valueRange, rangeOrderOfMagnitude, decimalNum;

            valueRange = maxValue - minValue;

            rangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange);

            graphMin = Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude);

            graphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude);

            graphRange = graphMax - graphMin;

            stepValue = Math.pow(10, rangeOrderOfMagnitude);

            numberOfSteps = Math.round(graphRange / stepValue);

            while (numberOfSteps < minSteps || numberOfSteps > maxSteps) {
                if (numberOfSteps < minSteps) {
                    stepValue /= 2;
                    numberOfSteps = Math.round(graphRange / stepValue);
                } else {
                    stepValue *= 2;
                    numberOfSteps = Math.round(graphRange / stepValue);
                }
            }
            ;

            var labels = [];
            populateLabels(labelTemplateString, labels, numberOfSteps, graphMin, stepValue);

            return {
                steps: numberOfSteps,
                stepValue: stepValue,
                graphMin: graphMin,
                labels: labels

            }

            function calculateOrderOfMagnitude(val) {
                return Math.floor(Math.log(val) / Math.LN10);
            }


        }

        function populateLabels(labelTemplateString, labels, numberOfSteps, graphMin, stepValue) {
            if (labelTemplateString) {
                for (var i = 1; i < numberOfSteps + 1; i++) {
                    labels.push(tmpl(labelTemplateString, {value: (graphMin + (stepValue * i)).toFixed(getDecimalPlaces(stepValue))}));
                }
            }
        }

        function Max(array) {
            return Math.max.apply(Math, array);
        };

        function Min(array) {
            return Math.min.apply(Math, array);
        };

        function Default(userDeclared, valueIfFalse) {
            if (!userDeclared) {
                return valueIfFalse;
            } else {
                return userDeclared;
            }
        };

        function isNumber(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        }

        function CapValue(valueToCap, maxValue, minValue) {
            if (isNumber(maxValue)) {
                if (valueToCap > maxValue) {
                    return maxValue;
                }
            }
            if (isNumber(minValue)) {
                if (valueToCap < minValue) {
                    return minValue;
                }
            }
            return valueToCap;
        }

        function getDecimalPlaces(num) {
            var numberOfDecimalPlaces;
            if (num % 1 != 0) {
                return num.toString().split(".")[1].length
            } else {
                return 0;
            }

        }

        function mergeChartConfig(defaults, userDefined) {
            var returnObj = {};
            for (var attrname in defaults) {
                returnObj[attrname] = defaults[attrname];
            }
            for (var attrname in userDefined) {
                returnObj[attrname] = userDefined[attrname];
            }
            return returnObj;
        }


        var cache = {};
    }

    window.PChart = function (context) {

        var chart = this;

        var animationOptions = {
            linear: function (t) {
                return t;
            },
            easeInQuad: function (t) {
                return t * t;
            },
            easeOutQuad: function (t) {
                return -1 * t * (t - 2);
            },
            easeInOutQuad: function (t) {
                if ((t /= 1 / 2) < 1) return 1 / 2 * t * t;
                return -1 / 2 * ((--t) * (t - 2) - 1);
            },
            easeInCubic: function (t) {
                return t * t * t;
            },
            easeOutCubic: function (t) {
                return 1 * ((t = t / 1 - 1) * t * t + 1);
            },
            easeInOutCubic: function (t) {
                if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t;
                return 1 / 2 * ((t -= 2) * t * t + 2);
            },
            easeInQuart: function (t) {
                return t * t * t * t;
            },
            easeOutQuart: function (t) {
                return -1 * ((t = t / 1 - 1) * t * t * t - 1);
            },
            easeInOutQuart: function (t) {
                if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t;
                return -1 / 2 * ((t -= 2) * t * t * t - 2);
            },
            easeInQuint: function (t) {
                return 1 * (t /= 1) * t * t * t * t;
            },
            easeOutQuint: function (t) {
                return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
            },
            easeInOutQuint: function (t) {
                if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t * t;
                return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
            },
            easeInSine: function (t) {
                return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
            },
            easeOutSine: function (t) {
                return 1 * Math.sin(t / 1 * (Math.PI / 2));
            },
            easeInOutSine: function (t) {
                return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
            },
            easeInExpo: function (t) {
                return (t == 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
            },
            easeOutExpo: function (t) {
                return (t == 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
            },
            easeInOutExpo: function (t) {
                if (t == 0) return 0;
                if (t == 1) return 1;
                if ((t /= 1 / 2) < 1) return 1 / 2 * Math.pow(2, 10 * (t - 1));
                return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
            },
            easeInCirc: function (t) {
                if (t >= 1) return t;
                return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
            },
            easeOutCirc: function (t) {
                return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
            },
            easeInOutCirc: function (t) {
                if ((t /= 1 / 2) < 1) return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
                return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
            },
            easeInElastic: function (t) {
                var s = 1.70158;
                var p = 0;
                var a = 1;
                if (t == 0) return 0;
                if ((t /= 1) == 1) return 1;
                if (!p) p = 1 * .3;
                if (a < Math.abs(1)) {
                    a = 1;
                    var s = p / 4;
                } else var s = p / (2 * Math.PI) * Math.asin(1 / a);
                return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
            },
            easeOutElastic: function (t) {
                var s = 1.70158;
                var p = 0;
                var a = 1;
                if (t == 0) return 0;
                if ((t /= 1) == 1) return 1;
                if (!p) p = 1 * .3;
                if (a < Math.abs(1)) {
                    a = 1;
                    var s = p / 4;
                } else var s = p / (2 * Math.PI) * Math.asin(1 / a);
                return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
            },
            easeInOutElastic: function (t) {
                var s = 1.70158;
                var p = 0;
                var a = 1;
                if (t == 0) return 0;
                if ((t /= 1 / 2) == 2) return 1;
                if (!p) p = 1 * (.3 * 1.5);
                if (a < Math.abs(1)) {
                    a = 1;
                    var s = p / 4;
                } else var s = p / (2 * Math.PI) * Math.asin(1 / a);
                if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
                return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * .5 + 1;
            },
            easeInBack: function (t) {
                var s = 1.70158;
                return 1 * (t /= 1) * t * ((s + 1) * t - s);
            },
            easeOutBack: function (t) {
                var s = 1.70158;
                return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
            },
            easeInOutBack: function (t) {
                var s = 1.70158;
                if ((t /= 1 / 2) < 1) return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));
                return 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
            },
            easeInBounce: function (t) {
                return 1 - animationOptions.easeOutBounce(1 - t);
            },
            easeOutBounce: function (t) {
                if ((t /= 1) < (1 / 2.75)) {
                    return 1 * (7.5625 * t * t);
                } else if (t < (2 / 2.75)) {
                    return 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + .75);
                } else if (t < (2.5 / 2.75)) {
                    return 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375);
                } else {
                    return 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375);
                }
            },
            easeInOutBounce: function (t) {
                if (t < 1 / 2) return animationOptions.easeInBounce(t * 2) * .5;
                return animationOptions.easeOutBounce(t * 2 - 1) * .5 + 1 * .5;
            }
        };

        var width = context.canvas.width;
        var height = context.canvas.height;

        if (window.devicePixelRatio) {
            context.canvas.style.width = width + "px";
            context.canvas.style.height = height + "px";
            context.canvas.height = height * window.devicePixelRatio;
            context.canvas.width = width * window.devicePixelRatio;
            context.scale(window.devicePixelRatio, window.devicePixelRatio);
        }

        this.Doughnut = function (data, options) {
            chart.Doughnut.defaults = {
                segmentShowStroke: true,
                segmentStrokeColor: "#fff",
                segmentStrokeWidth: 2,
                percentageInnerCutout: 50,
                animation: true,
                animationSteps: 100,
                animationEasing: "easeOutBounce",
                animateRotate: true,
                animateScale: false,
                onAnimationComplete: null,
                labelFontFamily: "Arial",
                labelFontStyle: "normal",
                labelFontSize: 24,
                labelFontColor: "#666"
            };

            var config = (options) ? mergeChartConfig(chart.Doughnut.defaults, options) : chart.Doughnut.defaults;

            return new Doughnut(data, config, context);
        };

        var clear = function (c) {
            c.clearRect(0, 0, width, height);
        };

        var Doughnut = function (data, config, ctx) {
            var segmentTotal = 0;

            var doughnutRadius = Min([height / 2, width / 2]) - 5;

            var cutoutRadius = doughnutRadius * (config.percentageInnerCutout / 100);

            for (var i = 0; i < data.length; i++) {
                segmentTotal += data[i].value;
            }

            animationLoop(config, null, drawPieSegments, ctx);

            function drawPieSegments(animationDecimal) {
                ctx.font = config.labelFontStyle + " " + config.labelFontSize + "px " + config.labelFontFamily;
                ctx.fillStyle = '#29a4ea';
                ctx.textBaseline = 'middle';
                ctx.fillText("<%=@percentile%> %", width / 2 - 20, width / 2, 200);

                var cumulativeAngle = -Math.PI / 2,
                    scaleAnimation = 1,
                    rotateAnimation = 1;
                if (config.animation) {
                    if (config.animateScale) {
                        scaleAnimation = animationDecimal;
                    }
                    if (config.animateRotate) {
                        rotateAnimation = animationDecimal;
                    }
                }
                for (var i = 0; i < data.length; i++) {
                    var segmentAngle = rotateAnimation * ((data[i].value / segmentTotal) * (Math.PI * 2));
                    ctx.beginPath();
                    ctx.arc(width / 2, height / 2, scaleAnimation * doughnutRadius, cumulativeAngle, cumulativeAngle + segmentAngle, false);
                    ctx.arc(width / 2, height / 2, scaleAnimation * cutoutRadius, cumulativeAngle + segmentAngle, cumulativeAngle, true);
                    ctx.closePath();
                    ctx.fillStyle = data[i].color;
                    ctx.fill();

                    if (config.segmentShowStroke) {
                        ctx.lineWidth = config.segmentStrokeWidth;
                        ctx.strokeStyle = config.segmentStrokeColor;
                        ctx.stroke();
                    }
                    cumulativeAngle += segmentAngle;
                }

            }

        }

        function calculateOffset(val, calculatedScale, scaleHop) {
            var outerValue = calculatedScale.steps * calculatedScale.stepValue;
            var adjustedValue = val - calculatedScale.graphMin;
            var scalingFactor = CapValue(adjustedValue / outerValue, 1, 0);
            return (scaleHop * calculatedScale.steps) * scalingFactor;
        }

        function animationLoop(config, drawScale, drawData, ctx) {
            var animFrameAmount = (config.animation) ? 1 / CapValue(config.animationSteps, Number.MAX_VALUE, 1) : 1,
                easingFunction = animationOptions[config.animationEasing],
                percentAnimComplete = (config.animation) ? 0 : 1;


            if (typeof drawScale !== "function") drawScale = function () {
            };

            requestAnimFrame(animLoop);

            function animateFrame() {
                var easeAdjustedAnimationPercent = (config.animation) ? CapValue(easingFunction(percentAnimComplete), null, 0) : 1;
                clear(ctx);
                if (config.scaleOverlay) {
                    drawData(easeAdjustedAnimationPercent);
                    drawScale();
                } else {
                    drawScale();
                    drawData(easeAdjustedAnimationPercent);
                }
            }

            function animLoop() {
                percentAnimComplete += animFrameAmount;
                animateFrame();
                if (percentAnimComplete <= 1) {
                    requestAnimFrame(animLoop);
                } else {
                    if (typeof config.onAnimationComplete == "function") config.onAnimationComplete();
                }

            }

        }


        var requestAnimFrame = (function () {
            return window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimationFrame ||
                function (callback) {
                    window.setTimeout(callback, 1000 / 60);
                };
        })();

        function calculateScale(drawingHeight, maxSteps, minSteps, maxValue, minValue, labelTemplateString) {
            var graphMin, graphMax, graphRange, stepValue, numberOfSteps, valueRange, rangeOrderOfMagnitude, decimalNum;

            valueRange = maxValue - minValue;

            rangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange);

            graphMin = Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude);

            graphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude);

            graphRange = graphMax - graphMin;

            stepValue = Math.pow(10, rangeOrderOfMagnitude);

            numberOfSteps = Math.round(graphRange / stepValue);

            while (numberOfSteps < minSteps || numberOfSteps > maxSteps) {
                if (numberOfSteps < minSteps) {
                    stepValue /= 2;
                    numberOfSteps = Math.round(graphRange / stepValue);
                } else {
                    stepValue *= 2;
                    numberOfSteps = Math.round(graphRange / stepValue);
                }
            }
            ;

            var labels = [];
            populateLabels(labelTemplateString, labels, numberOfSteps, graphMin, stepValue);

            return {
                steps: numberOfSteps,
                stepValue: stepValue,
                graphMin: graphMin,
                labels: labels

            }

            function calculateOrderOfMagnitude(val) {
                return Math.floor(Math.log(val) / Math.LN10);
            }


        }

        function populateLabels(labelTemplateString, labels, numberOfSteps, graphMin, stepValue) {
            if (labelTemplateString) {
                for (var i = 1; i < numberOfSteps + 1; i++) {
                    labels.push(tmpl(labelTemplateString, {value: (graphMin + (stepValue * i)).toFixed(getDecimalPlaces(stepValue))}));
                }
            }
        }

        function Max(array) {
            return Math.max.apply(Math, array);
        };

        function Min(array) {
            return Math.min.apply(Math, array);
        };

        function Default(userDeclared, valueIfFalse) {
            if (!userDeclared) {
                return valueIfFalse;
            } else {
                return userDeclared;
            }
        };

        function isNumber(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        }

        function CapValue(valueToCap, maxValue, minValue) {
            if (isNumber(maxValue)) {
                if (valueToCap > maxValue) {
                    return maxValue;
                }
            }
            if (isNumber(minValue)) {
                if (valueToCap < minValue) {
                    return minValue;
                }
            }
            return valueToCap;
        }

        function getDecimalPlaces(num) {
            var numberOfDecimalPlaces;
            if (num % 1 != 0) {
                return num.toString().split(".")[1].length
            } else {
                return 0;
            }

        }

        function mergeChartConfig(defaults, userDefined) {
            var returnObj = {};
            for (var attrname in defaults) {
                returnObj[attrname] = defaults[attrname];
            }
            for (var attrname in userDefined) {
                returnObj[attrname] = userDefined[attrname];
            }
            return returnObj;
        }


        var cache = {};
    }

    window.GChart = function (context) {

        var chart = this;

        var animationOptions = {
            linear: function (t) {
                return t;
            },
            easeInQuad: function (t) {
                return t * t;
            },
            easeOutQuad: function (t) {
                return -1 * t * (t - 2);
            },
            easeInOutQuad: function (t) {
                if ((t /= 1 / 2) < 1) return 1 / 2 * t * t;
                return -1 / 2 * ((--t) * (t - 2) - 1);
            },
            easeInCubic: function (t) {
                return t * t * t;
            },
            easeOutCubic: function (t) {
                return 1 * ((t = t / 1 - 1) * t * t + 1);
            },
            easeInOutCubic: function (t) {
                if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t;
                return 1 / 2 * ((t -= 2) * t * t + 2);
            },
            easeInQuart: function (t) {
                return t * t * t * t;
            },
            easeOutQuart: function (t) {
                return -1 * ((t = t / 1 - 1) * t * t * t - 1);
            },
            easeInOutQuart: function (t) {
                if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t;
                return -1 / 2 * ((t -= 2) * t * t * t - 2);
            },
            easeInQuint: function (t) {
                return 1 * (t /= 1) * t * t * t * t;
            },
            easeOutQuint: function (t) {
                return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
            },
            easeInOutQuint: function (t) {
                if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t * t;
                return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
            },
            easeInSine: function (t) {
                return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
            },
            easeOutSine: function (t) {
                return 1 * Math.sin(t / 1 * (Math.PI / 2));
            },
            easeInOutSine: function (t) {
                return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
            },
            easeInExpo: function (t) {
                return (t == 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
            },
            easeOutExpo: function (t) {
                return (t == 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
            },
            easeInOutExpo: function (t) {
                if (t == 0) return 0;
                if (t == 1) return 1;
                if ((t /= 1 / 2) < 1) return 1 / 2 * Math.pow(2, 10 * (t - 1));
                return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
            },
            easeInCirc: function (t) {
                if (t >= 1) return t;
                return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
            },
            easeOutCirc: function (t) {
                return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
            },
            easeInOutCirc: function (t) {
                if ((t /= 1 / 2) < 1) return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
                return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
            },
            easeInElastic: function (t) {
                var s = 1.70158;
                var p = 0;
                var a = 1;
                if (t == 0) return 0;
                if ((t /= 1) == 1) return 1;
                if (!p) p = 1 * .3;
                if (a < Math.abs(1)) {
                    a = 1;
                    var s = p / 4;
                } else var s = p / (2 * Math.PI) * Math.asin(1 / a);
                return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
            },
            easeOutElastic: function (t) {
                var s = 1.70158;
                var p = 0;
                var a = 1;
                if (t == 0) return 0;
                if ((t /= 1) == 1) return 1;
                if (!p) p = 1 * .3;
                if (a < Math.abs(1)) {
                    a = 1;
                    var s = p / 4;
                } else var s = p / (2 * Math.PI) * Math.asin(1 / a);
                return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
            },
            easeInOutElastic: function (t) {
                var s = 1.70158;
                var p = 0;
                var a = 1;
                if (t == 0) return 0;
                if ((t /= 1 / 2) == 2) return 1;
                if (!p) p = 1 * (.3 * 1.5);
                if (a < Math.abs(1)) {
                    a = 1;
                    var s = p / 4;
                } else var s = p / (2 * Math.PI) * Math.asin(1 / a);
                if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
                return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * .5 + 1;
            },
            easeInBack: function (t) {
                var s = 1.70158;
                return 1 * (t /= 1) * t * ((s + 1) * t - s);
            },
            easeOutBack: function (t) {
                var s = 1.70158;
                return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
            },
            easeInOutBack: function (t) {
                var s = 1.70158;
                if ((t /= 1 / 2) < 1) return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));
                return 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
            },
            easeInBounce: function (t) {
                return 1 - animationOptions.easeOutBounce(1 - t);
            },
            easeOutBounce: function (t) {
                if ((t /= 1) < (1 / 2.75)) {
                    return 1 * (7.5625 * t * t);
                } else if (t < (2 / 2.75)) {
                    return 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + .75);
                } else if (t < (2.5 / 2.75)) {
                    return 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375);
                } else {
                    return 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375);
                }
            },
            easeInOutBounce: function (t) {
                if (t < 1 / 2) return animationOptions.easeInBounce(t * 2) * .5;
                return animationOptions.easeOutBounce(t * 2 - 1) * .5 + 1 * .5;
            }
        };

        var width = context.canvas.width;
        var height = context.canvas.height;

        if (window.devicePixelRatio) {
            context.canvas.style.width = width + "px";
            context.canvas.style.height = height + "px";
            context.canvas.height = height * window.devicePixelRatio;
            context.canvas.width = width * window.devicePixelRatio;
            context.scale(window.devicePixelRatio, window.devicePixelRatio);
        }

        this.Doughnut = function (data, options) {
            chart.Doughnut.defaults = {
                segmentShowStroke: true,
                segmentStrokeColor: "#fff",
                segmentStrokeWidth: 2,
                percentageInnerCutout: 50,
                animation: true,
                animationSteps: 100,
                animationEasing: "easeOutBounce",
                animateRotate: true,
                animateScale: false,
                onAnimationComplete: null,
                labelFontFamily: "Arial",
                labelFontStyle: "normal",
                labelFontSize: 24,
                labelFontColor: "#666"
            };

            var config = (options) ? mergeChartConfig(chart.Doughnut.defaults, options) : chart.Doughnut.defaults;

            return new Doughnut(data, config, context);
        };

        var clear = function (c) {
            c.clearRect(0, 0, width, height);
        };

        var Doughnut = function (data, config, ctx) {
            var segmentTotal = 0;

            var doughnutRadius = Min([height / 2, width / 2]) - 5;

            var cutoutRadius = doughnutRadius * (config.percentageInnerCutout / 100);

            for (var i = 0; i < data.length; i++) {
                segmentTotal += data[i].value;
            }

            animationLoop(config, null, drawPieSegments, ctx);

            function drawPieSegments(animationDecimal) {
                ctx.font = config.labelFontStyle + " " + config.labelFontSize + "px " + config.labelFontFamily;
                ctx.fillStyle = '#29a4ea';
                ctx.textBaseline = 'middle';
                ctx.fillText("  <%= @grade.first%>", width / 2 - 20, width / 2, 200);

                var cumulativeAngle = -Math.PI / 2,
                    scaleAnimation = 1,
                    rotateAnimation = 1;
                if (config.animation) {
                    if (config.animateScale) {
                        scaleAnimation = animationDecimal;
                    }
                    if (config.animateRotate) {
                        rotateAnimation = animationDecimal;
                    }
                }
                for (var i = 0; i < data.length; i++) {
                    var segmentAngle = rotateAnimation * ((data[i].value / segmentTotal) * (Math.PI * 2));
                    ctx.beginPath();
                    ctx.arc(width / 2, height / 2, scaleAnimation * doughnutRadius, cumulativeAngle, cumulativeAngle + segmentAngle, false);
                    ctx.arc(width / 2, height / 2, scaleAnimation * cutoutRadius, cumulativeAngle + segmentAngle, cumulativeAngle, true);
                    ctx.closePath();
                    ctx.fillStyle = data[i].color;
                    ctx.fill();

                    if (config.segmentShowStroke) {
                        ctx.lineWidth = config.segmentStrokeWidth;
                        ctx.strokeStyle = config.segmentStrokeColor;
                        ctx.stroke();
                    }
                    cumulativeAngle += segmentAngle;
                }

            }

        }

        function calculateOffset(val, calculatedScale, scaleHop) {
            var outerValue = calculatedScale.steps * calculatedScale.stepValue;
            var adjustedValue = val - calculatedScale.graphMin;
            var scalingFactor = CapValue(adjustedValue / outerValue, 1, 0);
            return (scaleHop * calculatedScale.steps) * scalingFactor;
        }

        function animationLoop(config, drawScale, drawData, ctx) {
            var animFrameAmount = (config.animation) ? 1 / CapValue(config.animationSteps, Number.MAX_VALUE, 1) : 1,
                easingFunction = animationOptions[config.animationEasing],
                percentAnimComplete = (config.animation) ? 0 : 1;


            if (typeof drawScale !== "function") drawScale = function () {
            };

            requestAnimFrame(animLoop);

            function animateFrame() {
                var easeAdjustedAnimationPercent = (config.animation) ? CapValue(easingFunction(percentAnimComplete), null, 0) : 1;
                clear(ctx);
                if (config.scaleOverlay) {
                    drawData(easeAdjustedAnimationPercent);
                    drawScale();
                } else {
                    drawScale();
                    drawData(easeAdjustedAnimationPercent);
                }
            }

            function animLoop() {
                percentAnimComplete += animFrameAmount;
                animateFrame();
                if (percentAnimComplete <= 1) {
                    requestAnimFrame(animLoop);
                } else {
                    if (typeof config.onAnimationComplete == "function") config.onAnimationComplete();
                }

            }

        }


        var requestAnimFrame = (function () {
            return window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimationFrame ||
                function (callback) {
                    window.setTimeout(callback, 1000 / 60);
                };
        })();

        function calculateScale(drawingHeight, maxSteps, minSteps, maxValue, minValue, labelTemplateString) {
            var graphMin, graphMax, graphRange, stepValue, numberOfSteps, valueRange, rangeOrderOfMagnitude, decimalNum;

            valueRange = maxValue - minValue;

            rangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange);

            graphMin = Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude);

            graphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude);

            graphRange = graphMax - graphMin;

            stepValue = Math.pow(10, rangeOrderOfMagnitude);

            numberOfSteps = Math.round(graphRange / stepValue);

            while (numberOfSteps < minSteps || numberOfSteps > maxSteps) {
                if (numberOfSteps < minSteps) {
                    stepValue /= 2;
                    numberOfSteps = Math.round(graphRange / stepValue);
                } else {
                    stepValue *= 2;
                    numberOfSteps = Math.round(graphRange / stepValue);
                }
            }
            ;

            var labels = [];
            populateLabels(labelTemplateString, labels, numberOfSteps, graphMin, stepValue);

            return {
                steps: numberOfSteps,
                stepValue: stepValue,
                graphMin: graphMin,
                labels: labels

            }

            function calculateOrderOfMagnitude(val) {
                return Math.floor(Math.log(val) / Math.LN10);
            }


        }

        function populateLabels(labelTemplateString, labels, numberOfSteps, graphMin, stepValue) {
            if (labelTemplateString) {
                for (var i = 1; i < numberOfSteps + 1; i++) {
                    labels.push(tmpl(labelTemplateString, {value: (graphMin + (stepValue * i)).toFixed(getDecimalPlaces(stepValue))}));
                }
            }
        }

        function Max(array) {
            return Math.max.apply(Math, array);
        };

        function Min(array) {
            return Math.min.apply(Math, array);
        };

        function Default(userDeclared, valueIfFalse) {
            if (!userDeclared) {
                return valueIfFalse;
            } else {
                return userDeclared;
            }
        };

        function isNumber(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        }

        function CapValue(valueToCap, maxValue, minValue) {
            if (isNumber(maxValue)) {
                if (valueToCap > maxValue) {
                    return maxValue;
                }
            }
            if (isNumber(minValue)) {
                if (valueToCap < minValue) {
                    return minValue;
                }
            }
            return valueToCap;
        }

        function getDecimalPlaces(num) {
            var numberOfDecimalPlaces;
            if (num % 1 != 0) {
                return num.toString().split(".")[1].length
            } else {
                return 0;
            }

        }

        function mergeChartConfig(defaults, userDefined) {
            var returnObj = {};
            for (var attrname in defaults) {
                returnObj[attrname] = defaults[attrname];
            }
            for (var attrname in userDefined) {
                returnObj[attrname] = userDefined[attrname];
            }
            return returnObj;
        }


        var cache = {};
    }
    }

    function calculateOffset(val,calculatedScale,scaleHop){
        var outerValue = calculatedScale.steps * calculatedScale.stepValue;
        var adjustedValue = val - calculatedScale.graphMin;
        var scalingFactor = CapValue(adjustedValue/outerValue,1,0);
        return (scaleHop*calculatedScale.steps) * scalingFactor;
    }

    function animationLoop(config,drawScale,drawData,ctx){
        var animFrameAmount = (config.animation)? 1/CapValue(config.animationSteps,Number.MAX_VALUE,1) : 1,
            easingFunction = animationOptions[config.animationEasing],
            percentAnimComplete =(config.animation)? 0 : 1;



        if (typeof drawScale !== "function") drawScale = function(){};

        requestAnimFrame(animLoop);

        function animateFrame(){
            var easeAdjustedAnimationPercent =(config.animation)? CapValue(easingFunction(percentAnimComplete),null,0) : 1;
            clear(ctx);
            if(config.scaleOverlay){
                drawData(easeAdjustedAnimationPercent);
                drawScale();
            } else {
                drawScale();
                drawData(easeAdjustedAnimationPercent);
            }
        }
        function animLoop(){
            percentAnimComplete += animFrameAmount;
            animateFrame();
            if (percentAnimComplete <= 1){
                requestAnimFrame(animLoop);
            }
            else{
                if (typeof config.onAnimationComplete == "function") config.onAnimationComplete();
            }

        }

    }


    var requestAnimFrame = (function(){
        return window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function(callback) {
                window.setTimeout(callback, 1000 / 60);
            };
    })();

    function calculateScale(drawingHeight,maxSteps,minSteps,maxValue,minValue,labelTemplateString){
        var graphMin,graphMax,graphRange,stepValue,numberOfSteps,valueRange,rangeOrderOfMagnitude,decimalNum;

        valueRange = maxValue - minValue;

        rangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange);

        graphMin = Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude);

        graphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude);

        graphRange = graphMax - graphMin;

        stepValue = Math.pow(10, rangeOrderOfMagnitude);

        numberOfSteps = Math.round(graphRange / stepValue);

        while(numberOfSteps < minSteps || numberOfSteps > maxSteps) {
            if (numberOfSteps < minSteps){
                stepValue /= 2;
                numberOfSteps = Math.round(graphRange/stepValue);
            }
            else{
                stepValue *=2;
                numberOfSteps = Math.round(graphRange/stepValue);
            }
        };

        var labels = [];
        populateLabels(labelTemplateString, labels, numberOfSteps, graphMin, stepValue);

        return {
            steps : numberOfSteps,
            stepValue : stepValue,
            graphMin : graphMin,
            labels : labels

        }

        function calculateOrderOfMagnitude(val){
            return Math.floor(Math.log(val) / Math.LN10);
        }


    }

    function populateLabels(labelTemplateString, labels, numberOfSteps, graphMin, stepValue) {
        if (labelTemplateString) {
            for (var i = 1; i < numberOfSteps + 1; i++) {
                labels.push(tmpl(labelTemplateString, {value: (graphMin + (stepValue * i)).toFixed(getDecimalPlaces(stepValue))}));
            }
        }
    }

    function Max( array ){
        return Math.max.apply( Math, array );
    };
    function Min( array ){
        return Math.min.apply( Math, array );
    };
    function Default(userDeclared,valueIfFalse){
        if(!userDeclared){
            return valueIfFalse;
        } else {
            return userDeclared;
        }
    };

    function isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    function CapValue(valueToCap, maxValue, minValue){
        if(isNumber(maxValue)) {
            if( valueToCap > maxValue ) {
                return maxValue;
            }
        }
        if(isNumber(minValue)){
            if ( valueToCap < minValue ){
                return minValue;
            }
        }
        return valueToCap;
    }
    function getDecimalPlaces (num){
        var numberOfDecimalPlaces;
        if (num%1!=0){
            return num.toString().split(".")[1].length
        }
        else{
            return 0;
        }

    }

    function mergeChartConfig(defaults,userDefined){
        var returnObj = {};
        for (var attrname in defaults) { returnObj[attrname] = defaults[attrname]; }
        for (var attrname in userDefined) { returnObj[attrname] = userDefined[attrname]; }
        return returnObj;
    }


    var cache = {};
  }
</script>