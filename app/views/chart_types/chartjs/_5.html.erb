<canvas id="npsChart<%= section %><%=q.id.to_s %>"></canvas>

<script>
    Chart.pluginService.register({
        beforeDraw: function (chart) {
            if (chart.config.options.elements.center) {
                //Get ctx from string
                var ctx = chart.chart.ctx;

                //Get options from the center object in options
                var centerConfig = chart.config.options.elements.center;
                var fontStyle = centerConfig.fontStyle || 'Arial';
                var txt = centerConfig.text;
                var color = centerConfig.color || '#000';
                var sidePadding = centerConfig.sidePadding || 20;
                var sidePaddingCalculated = (sidePadding/100) * (chart.innerRadius * 2)
                //Start with a base font of 30px
                ctx.font = "50px " + fontStyle;

                //Get the width of the string and also the width of the element minus 10 to give it 5px side padding
                var stringWidth = ctx.measureText(txt).width;
                var elementWidth = (chart.innerRadius * 2) - sidePaddingCalculated;

                // Find out how much the font can grow in width.
                var widthRatio = elementWidth / stringWidth;
                var newFontSize = Math.floor(30 * widthRatio);
                var elementHeight = (chart.innerRadius * 2);

                // Pick a new font size so it will not be larger than the height of label.
                var fontSizeToUse = Math.min(newFontSize, elementHeight);

                //Set font settings to draw it correctly.
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                var centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);
                var centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 1.3);
                ctx.font = fontSizeToUse+"px " + fontStyle;
                ctx.fillStyle = color;

                //Draw text in center
                ctx.fillText(txt, centerX, centerY);
            }
        }
    });


    var config<%= section %><%=q.id.to_s %> = {
        type: 'doughnut',
        data: {
            labels: [
                "Detractors",
                "Promoters",
                "Passives"
            ],
            datasets: [{
                data: [
                    <%= nps_calculator(@results[cat.id.to_s][q.id.to_s].values.flatten)[:detractors] if @results[cat.id.to_s].present? %>,
                    <%= nps_calculator(@results[cat.id.to_s][q.id.to_s].values.flatten)[:promoters] if @results[cat.id.to_s].present? %>,
                    <%= nps_calculator(@results[cat.id.to_s][q.id.to_s].values.flatten)[:passives] if @results[cat.id.to_s].present? %>
                ],
                backgroundColor: [
                    "#FF6384",
                    "#009788",
                    "#FFCE56"
                ],
                hoverBackgroundColor: [
                    "#FF6384",
                    "#009788",
                    "#FFCE56"
                ]
            }]
        },
        options: {
            rotation: 1 * Math.PI,
            circumference: 1 * Math.PI,
            elements: {
                center: {
                    text: '<%= nps_calculator(@results[cat.id.to_s][q.id.to_s].values.flatten)[:total_score] if @results[cat.id.to_s].present? %>',
                    color: 'black',
                    fontStyle: 'Arial',
                    sidePadding: 20
                }
            },
            plugins: {
                datalabels: {
                    display: function(context) {
                        return context.dataset.data[context.dataIndex] !== 0;
                    },
                    color: '#FFFFFF'
                }
            }
        }
    };

    var ctx<%= section %><%=q.id.to_s %> = document.getElementById("npsChart<%= section %><%=q.id.to_s %>").getContext("2d");
    var myChart = new Chart(ctx<%= section %><%=q.id.to_s %>, config<%= section %><%=q.id.to_s %>);
</script>